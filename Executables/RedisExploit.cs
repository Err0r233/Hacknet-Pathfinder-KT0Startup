using Hacknet;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Pathfinder.Util;

// Warning: this .cs script is deprecated, Do not use it for exe files
// Warning: this .cs script is deprecated, Do not use it for exe files.
// Warning: this .cs script is deprecated, Do not use it for exe files.
// Use Redis.cs for instead.

namespace KT0Mods.KT0Exe
{
    public class RedisExploit : Pathfinder.Executable.BaseExecutable
{
    
    private float crackTime = 8f;

    public List<string> text = new List<string>();

    private int RedisPort;

    private float timer;

    private float crackProgress = 0f;
    
    public RedisExploit(Rectangle location, OS os, string[] args) : base(location, os, args)
    {
        ramCost = 324;
        IdentifierName = "RedisExploit";
        needsProxyAccess = true;
        name = "RedisExploit";
        
    }

    public override void LoadContent()
    {
        Computer targetComputer = ComputerLookup.FindByIp(targetIP);
            
        if (targetComputer == null)
        {
            os.write("[-] Target not found.");
            needsRemoval = true;
            return;
        }
            
        RedisPort = targetComputer.GetDisplayPortNumberFromCodePort(6379);
        
        text.Add("00000000");
        text.Add("                                          _._                                                  ");
        text.Add("                                     _.-``__ ''-._                                             ");
        text.Add("                                _.-``    `.  `_.  ''-._           ");
        text.Add("                            .-`` .-```.  ```\\/    _.,_ ''-._                                  ");
        text.Add("                           (    '      ,       .-`  | `,    )     ");
        text.Add("                           |`-._`-...-` __...-.``-._|'` _.-'|     ");
        text.Add("                           |    `-._   `._    /     _.-'    |     ");
        text.Add("                            `-._    `-._  `-./  _.-'    _.-'                                   ");
        text.Add("                           |`-._`-._    `-.__.-'    _.-'_.-'|                                  ");
        text.Add("                           |    `-._`-._        _.-'_.-'    |           ");
        text.Add("                            `-._    `-._`-.__.-'_.-'    _.-'                                   ");
        text.Add("                           |`-._`-._    `-.__.-'    _.-'_.-'|                                  ");
        text.Add("                           |    `-._`-._        _.-'_.-'    |                                  ");
        text.Add("                           `-._    `-._`-.__.-'_.-'    _.-'                                   ");
        text.Add("                                `-._    `-.__.-'    _.-'                                       ");
        text.Add("                                    `-._        _.-'                                           ");
        text.Add("                                        `-.__.-'                                               ");
        text.Add("                              Redis 2.6.7 (000000/0) 64 bit");
        text.Add("                              Running Exploit...");
        
        
        foreach (var exe in os.exes)
        {
            if (exe is RedisExploit)
            {
                needsRemoval = true;
                os.terminal.writeLine("> RedisExploit is running");
                return;
            }
        }
        
        if (Args.Length != 2)
        {
            os.write("Usage: RedisExploit [Redis port]");
            needsRemoval = true;
            return;
        }
        else if (Int32.Parse(Args[1]) != RedisPort)
        {
            os.write("> Illegal Port");
            needsRemoval = true;
            return;
        }
        
        targetComputer.hostileActionTaken();
        base.LoadContent();
        
    }

    public override void Draw(float t)
    {
        base.Draw(t);
        
        drawOutline();
        drawTarget("app:");

        Rectangle dest = bounds;
        dest.Inflate(-2, -(PANEL_HEIGHT + 1));
        dest.Y += PANEL_HEIGHT;
        
        
        DrawBackgroundInit(dest);
        
        // 绘制绘画区域
        Rectangle drawArea = Hacknet.Utils.InsetRectangle(
            new Rectangle(this.bounds.X, this.bounds.Y + Module.PANEL_HEIGHT, this.bounds.Width,
                this.bounds.Height - Module.PANEL_HEIGHT), 2);

        Rectangle progressBg = new Rectangle(
            drawArea.X,
            drawArea.Y + 285,
            drawArea.Width,
            15
        );

        if (crackProgress < 1f)
        {
            spriteBatch.Draw(Hacknet.Utils.white, progressBg, Color.DarkSlateGray);
        }
        
        
        // 绘制进度条
        Rectangle progressBar = new Rectangle(
            drawArea.X,
            drawArea.Y + 285,
            (int)(drawArea.Width * crackProgress),
            15
        );

        if (crackProgress < 1f)
        {
            spriteBatch.Draw(Hacknet.Utils.white, progressBar, Color.Azure);
        }
        
        for (int i = 1; i < text.Count; i++)
        {
            Vector2 textSize = GuiData.tinyfont.MeasureString(text[i]);
            Vector2 textPos;
            
            if (i < text.Count - 2)
            {
                textPos = new Vector2(drawArea.X + 30f,
                    drawArea.Y - 30f + (int)(drawArea.Height * (i * 1.0f / (text.Count - 1))));
            }
            else
            {
                textPos = new Vector2(drawArea.X + (drawArea.Width - textSize.X) / 2,
                    drawArea.Y - 25f + (int)(drawArea.Height * (i * 1.0f / (text.Count - 1))));
            }
            
            spriteBatch.DrawString(GuiData.tinyfont, text[i], textPos, Color.Lerp(Color.LimeGreen, Color.Red, crackProgress));
        }
        
    }
    
    private void DrawBackgroundInit(Rectangle dest)
    {
        for (var x = Bounds.X + 4; x < Bounds.X + Bounds.Width - 20; x += 16) for (var y = Bounds.Y + 18; y < Bounds.Y + Bounds.Height - 20; y += 16)
        {
            float size = 0.8f - Math.Abs((timer % 3f) - ((x - Bounds.X + y - Bounds.Y - 22) / 480f + 1)) - 0.1f;
            if (size < 0) continue;
            size = size * size;
            spriteBatch.Draw(Hacknet.Utils.white, new Rectangle(x + 8 - (int)(8 * size), y + 8 - (int)(8 * size), (int)(16 * size), (int)(16 * size)), new Rectangle?(), Utils.DrawUtils.ColorFromHSV((float)(new Random()).NextDouble(), 0.3f, 0.3f), 0, new Vector2(0, 0), SpriteEffects.None, 0f);
        }
    }

    public override void Update(float t)
    {
        Computer comp = Programs.getComputer(os, targetIP);
        timer += t;

        if (timer < 8f)
        {
            crackProgress += t / 8f;
        }
        else
        {
            crackProgress = 1f;
        }
        if (timer >= crackTime && !isExiting)
        {
            text[text.Count - 1] = ">>> Success <<<";
            comp.openPort(RedisPort, os.thisComputer.ip);
            os.write("> RedisExploit completed.");
                
            isExiting = true;
        }
        
        base.Update(t);
    }
}
}

